# Let's start with string paths...
path = "~/foo/bar/baz.txt"
path

# Look at how boring that is!

import os.path  # We need this guy to even work with them

path = os.path.expanduser(path)
os.path.normpath(path)
os.path.abspath(path)
os.path.split(path)
os.path.exists(path)
os.path.isdir(path)
os.path.isfile(path)
# What's with all of this passing things all over the place?
# What is this, the dark ages?

# Enter pathlib!!
from pathlib import Path

path = Path("~/foo/bar/baz.txt")
str(path)
type(path)
type(path).__mro__  # What are its ancestors?
hash(path)  # Will it hash? Yes!

# Other ways to make a path
current_dir = Path.cwd()
home_dir = Path.home()
Path(__file__)

# Let's mess with PurePath operations...
# Paths have parts and parents
path.parts
path.parent
list(path.parents)

# The last segment of a path has parts of its own
path.name
path.stem
path.suffix

# With methods to change them
path.with_name("spam.txt")
path.with_stem("eggs")
path.with_suffix(".zip")

# Let's mutate the path some
path = path.expanduser()
path.absolute()
path.resolve()
path = path.resolve()

# And now, the parade of bool methods...
path.exists()
home_dir.exists()
home_dir.is_dir()
home_dir.is_file()
home_dir.is_junction()
home_dir.is_symlink()
home_dir.is_mount()
home_dir.is_socket()
home_dir.is_fifo()
home_dir.is_block_device()
home_dir.is_char_device()

# More path operations...
path.parent
parent_dir = path.parent
data_dir = parent_dir.joinpath("data")
data_dir = parent_dir / "data"
path.is_relative_to(home_dir)
home_dir in path.absolute().parents
path.relative_to(home_dir)

# Let's mess with directories...
data_dir.is_dir()
data_dir.mkdir(parents=True, exist_ok=True)
data_dir.is_dir()
list(parent_dir.iterdir())
list(parent_dir.walk())
list(parent_dir.glob("*"))
list(parent_dir.rglob("*"))
data_dir.rmdir()

# Let's mess with files...
path.exists()
path.touch()
path.exists()
path.is_file()
list(parent_dir.rglob("*"))

# What about writing to the file?
with path.open(mode="w", encoding="UTF-8") as f:
    f.write("This is file content")
path.write_text("this is file content", encoding="UTF-8")
path.write_bytes(b"This is file content")

# And reading?
with path.open(mode="r", encoding="UTF-8") as f:
    print(f.read())
path.read_text(encoding="UTF-8")
path.read_bytes()

# What about properties, like size?
s = path.stat()
s.st_size
s.st_mode
new_path = Path("~/foo2/bar/baz.txt")
new_path.parent.mkdir(parents=True, exist_ok=True)
path.rename(new_path)
new_path.replace(path)
new_path.unlink(missing_ok=True)

# Now let's cleanup...
for p in [*sorted(parent_dir.rglob("*"), reverse=True), parent_dir]:
    if p.is_file():
        p.unlink()  # Delete file
    elif p.is_dir():
        p.rmdir()  # Delete empty dir
list(parent_dir.rglob("*"))
parent_dir.exists()

# So, go play with pathlib!
