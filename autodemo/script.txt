path = '~/foo/bar/baz.txt'
path
import os.path
path = os.path.expanduser(path)
os.path.abspath(path)
os.path.split(path)
os.path.exists(path)
os.path.isdir(path)
os.path.isfile(path)
from pathlib import Path
path = Path('~/foo/bar/baz.txt')
current_dir = Path.cwd()
home = Path.home()
current_module = Path(__file__)
path.name
path.stem
path.suffix
path.with_name('spam.txt')
path.with_stem('eggs')
path.with_suffix('.zip')
path.parts
path.parent
list(path.parents)
path = path.expanduser()
path.absolute()
path.resolve()
path = path.resolve()
path.exists()
path.is_dir()
path.is_file()
path.is_junction()
path.is_symlink()
path.is_mount()
path.is_socket()
path.is_fifo()
path.is_block_device()
path.is_char_device()
parent_dir = path.parent
data_dir = parent_dir.joinpath('data')
data_dir = parent_dir / 'data'
path.is_relative_to(home)
home in path.absolute().parents
path.relative_to(home)
data_dir.is_dir()
data_dir.mkdir(parents=True, exist_ok=True)
data_dir.is_dir()
list(parent_dir.iterdir())
list(parent_dir.walk())
list(parent_dir.glob('*'))
list(parent_dir.rglob('*'))
data_dir.rmdir()
path.touch()
list(dir.rglob('*'))
path.read_text(encoding='UTF-8')
path.read_bytes()
with path.open(mode='r', encoding='UTF-8') as f:
    f.read()

path.write_text('this is file content', encoding='UTF-8')
path.write_bytes(b'This is file content')
with path.open(mode='w', encoding='UTF-8') as f:
    f.write('This is file content')

s = path.stat()
s.st_size
s.st_mode
new_path = Path('~/foo2/bar/baz.txt')
new_path.parent.mkdir(parents=True, exist_ok=True)
path.rename(new_path)
new_path.replace(path)
new_path.unlink(missing_ok=True)
parent_dir.exists()